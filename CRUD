//stateless functional component
const NavBar = ({totalCounters}) => {
  console.log('NavBar - Rendered')
  return(
    <nav className="navbar navbar-light bg-light">
      <a className="navbar-brand" href="#">CRUD Navbar </a>
      <span className="badge badge-primary">{totalCounters}</span>
    </nav>
  )
}

class App extends React.Component {
  state = {
    counters:[
      {id:1, value: 0},
      {id:2, value: 4},
      {id:3, value: 0},
      {id:4, value: 0}
    ]
  }

  constructor() {
    super() 
    console.log('App - Constructor')
  }

  componentDidMount() {
    console.log('App - Mount')
  }

  handleDelete = (counterId) => {
    const counters = this.state.counters.filter(c => c.id !== counterId)
    this.setState({counters})
  }
  
  handleReset = () => {
    const counters = this.state.counters.map(c => {
      c.value = 0
      return c 
    })
    this.setState({ counters })
  }

  handleIncrement = (counter) => {
    const counters = this.state.counters
    const index = counters.indexOf(counter)
    counters[index].value++
    this.setState({counters})
  }
  
  render() {
    console.log('App - Render')
    return(
      <div className="container">
        <NavBar totalCounters = {this.state.counters.filter(c => c.value > 0).length}/>
        <Counters
            counters = {this.state.counters}
            onDelete = {this.handleDelete}
            onIncrement = {this.handleIncrement}
            onReset = {this.handleReset}
        />
      </div>
    )
  }
}

class Counters extends React.Component {

  render() {
    console.log('Counters - Rendered')
    const { onReset, counters, onDelete, onIncrement} = this.props
    
    return(
      <React.Fragment><hr/>
        <button onClick={onReset} className="btn btn-success">Reset</button><hr/>
        <table>
        {counters.map(counter => (
           <Counter key={counter.id} counter={counter} onDelete={onDelete} onIncrement={onIncrement}/>
        ))}
        </table>
      </React.Fragment>
    )
  }
}

class Counter extends React.Component {
  
  componentDidUpdate() {
    console.log('Counter - Update')
  }
  
  componentWillUnmount() {
    console.log('Counter - Unmount')
  }
  
  formatCount() {
    const { value } = this.props.counter 
    return value === 0 ? "zero" : value
  }

  getBadgeClasses() {
    let classes = "badge m-2 badge-"
    classes+=this.props.counter.value === 0 ? 'warning' : 'success'
    return classes
  }

  render() {
    console.log('Counter - Rendered')
    return(
      <tr>
        <td><span className={this.getBadgeClasses()}>{this.formatCount()}</span></td>
        <td><button onClick={() => this.props.onIncrement(this.props.counter)} className="btn btn-info">Increment</button></td>
        <td><button onClick={() => this.props.onDelete(this.props.counter.id)} className="btn btn-danger">Delete</button></td>
      </tr>
    )
  }
}

ReactDOM.render(
  <App/>,
  document.getElementById('root')
)
